---
- name: Installing and configuring Docker
  hosts: all
  vars:
    create_oss_network: yes
    install_docker_compose: yes
    install_docker_machine: yes
  roles:
  - { role: home1-oss.oss-docker-install, tags: ["docker"] }

- name: Docker config
  hosts: ["net", "repository"]
  vars:
    docker_registry_mirrors:
    - http://hub-mirror.c.163.com
  roles:
    - { role: home1-oss.oss-docker-config, tags: ["always"] }

- name: clean up
  hosts: all
  tasks:
  - shell: "{{ item }}"
    with_items:
    #- "docker images | grep none | awk '{print $3}' | xargs docker rmi"
    #- "docker images -f 'dangling=true' -q | xargs docker rmi"
    - "docker volume ls -qf dangling=true | xargs docker volume rm"
    ignore_errors: true
    sudo: yes
    tags:
    - always

- name: dns
  hosts: "net"
  vars:
    git_repo: https://github.com/home1-oss/docker-bind.git
    git_dest: /tmp/docker-bind
    file: docker-compose.yml
    #pull: yes
  environment:
    FORWARDERS: "{{ forwarders }}"
    INFRASTRUCTURE: "{{ infrastructure }}"
  roles:
  - { role: docker-compose, tags: ["dns"] }
- hosts: "net"
  vars:
    service: bind
    service_ip: "{{ hostvars['net']['ansible_ssh_host'] }}"
  roles:
  - { role: oss-dns-record, tags: ["dns"] }

- name: Setup /etc/resolv.conf
  hosts: ["repository", "ci"]
  vars:
    resolv_conf_nameservers:
    - "{{ hostvars['net']['ansible_ssh_host'] }}"
    - "{{ forwarders }}"
    - 8.8.4.4
    - 8.8.8.8
    #resolv_conf_search_domains:
    #- example.com
  roles:
  - { role: kbrebanov.resolv_conf, tags: ["dns"] }

- name: privoxy
  hosts: "net"
  vars:
    git_repo: https://github.com/home1-oss/docker-privoxy.git
    git_dest: /tmp/docker-privoxy
    file: docker-compose.yml
    #pull: yes
  environment:
    INFRASTRUCTURE: "{{ infrastructure }}"
    SOCKS_PROXY: "{{ proxy }}"
  roles:
  - { role: docker-compose, tags: ["privoxy"] }
- hosts: "net"
  vars:
    service: http-to-socks
    service_ip: "{{ hostvars['net']['ansible_ssh_host'] }}"
  roles:
  - { role: oss-dns-record, tags: ["dns", "privoxy"] }
- hosts: "net"
  vars:
    service: smart-http-proxy
    service_ip: "{{ hostvars['net']['ansible_ssh_host'] }}"
  roles:
  - { role: oss-dns-record, tags: ["dns", "privoxy"] }


- name: openldap
  hosts: "net"
  vars:
    git_repo: https://github.com/home1-oss/docker-openldap.git
    git_dest: /tmp/docker-openldap
    file: openldap/docker-compose.yml
    #pull: yes
  environment:
    INFRASTRUCTURE: "{{ infrastructure }}"
  roles:
  - { role: docker-compose, tags: ["ldap"] }
- hosts: "net"
  vars:
    service: ldap
    service_ip: "{{ hostvars['net']['ansible_ssh_host'] }}"
  roles:
  - { role: oss-dns-record, tags: ["dns", "ldap"] }
- name: phpldapadmin
  hosts: "net"
  vars:
    git_repo: https://github.com/home1-oss/docker-openldap.git
    git_dest: /tmp/docker-openldap
    file: phpldapadmin/docker-compose.yml
    #pull: yes
  environment:
    INFRASTRUCTURE: "{{ infrastructure }}"
  roles:
  - { role: docker-compose, tags: ["ldap"] }
- hosts: "net"
  vars:
    service: phpldapadmin
    service_ip: "{{ hostvars['net']['ansible_ssh_host'] }}"
  roles:
  - { role: oss-dns-record, tags: ["dns", "ldap"] }


- name: gcr.io
  hosts: "repository"
  vars:
    git_repo: https://github.com/home1-oss/docker-pull-through-cache.git
    git_dest: /tmp/docker-pull-through-cache
    file: docker-compose-mirror-gcr.yml
    #pull: yes
  environment:
    INFRASTRUCTURE: "{{ infrastructure }}"
    PROXY: "{{ proxy }}"
    PULL_THROUGH_CACHE_OF: https://gcr.io
    PULL_THROUGH_CACHE_PORT: 25004
  roles:
  - { role: docker-compose, tags: ["nexus3"] }
- hosts: "net"
  vars:
    service: gcr.io
    service_ip: "{{ hostvars['repository']['ansible_ssh_host'] }}"
  roles:
  - { role: oss-dns-record, tags: ["dns", "nexus3"] }

- name: nexus3
  hosts: "repository"
  vars:
    git_repo: https://github.com/home1-oss/docker-nexus3.git
    git_dest: /tmp/docker-nexus3
    file: docker-compose.yml
    #pull: yes
  environment:
    DOCKER_MIRROR_GCR: http://gcr.io.internal:25004
    INFRASTRUCTURE: "{{ infrastructure }}"
    NEXUS_CONTEXT: nexus
    NEXUS3_CONTEXT: nexus
    NEXUS3_DEPLOYMENT_PASSWORD: deployment
    NEXUS3_PORT: 28081
  roles:
  - { role: docker-compose, tags: ["nexus3"] }
- hosts: "net"
  vars:
    service: nexus3
    service_ip: "{{ hostvars['repository']['ansible_ssh_host'] }}"
  roles:
  - { role: oss-dns-record, tags: ["dns", "nexus3"] }

- name: fileserver
  hosts: "repository"
  vars:
    file: docker-compose-fileserver.yml
  environment:
    BACKEND_DOMAIN: nexus3
    INFRASTRUCTURE: "{{ infrastructure }}"
    SERVER_LOCATION: ~ ^/(.*)
    SERVER_PROXY_PASS_CONTEXT: /nexus/repository/files/$1
  roles:
  - { role: docker-proxy, tags: ["nexus3"] }
- hosts: "net"
  vars:
    service: fileserver
    service_ip: "{{ hostvars['repository']['ansible_ssh_host'] }}"
  roles:
  - { role: oss-dns-record, tags: ["dns", "nexus3"] }

- name: mirror.docker
  hosts: "repository"
  vars:
    file: docker-compose-mirror.yml
  environment:
    BACKEND_DOMAIN: nexus3
    BASIC_AUTH_PASS: deployment
    BASIC_AUTH_USER: deployment
    INFRASTRUCTURE: "{{ infrastructure }}"
  roles:
  - { role: docker-proxy, tags: ["nexus3"] }
- hosts: "net"
  vars:
    service: mirror.docker
    service_ip: "{{ hostvars['repository']['ansible_ssh_host'] }}"
  roles:
  - { role: oss-dns-record, tags: ["dns", "nexus3"] }

- name: mvnsite
  hosts: "repository"
  vars:
    file: docker-compose-mvnsite.yml
  environment:
    BACKEND_DOMAIN: nexus3
    INFRASTRUCTURE: "{{ infrastructure }}"
    SERVER_LOCATION: ~ ^/(.*)
    SERVER_PROXY_PASS_CONTEXT: /nexus/repository/mvnsite/$1
  roles:
  - { role: docker-proxy, tags: ["nexus3"] }
- hosts: "net"
  vars:
    service: mvnsite
    service_ip: "{{ hostvars['repository']['ansible_ssh_host'] }}"
  roles:
  - { role: oss-dns-record, tags: ["dns", "nexus3"] }

- name: nexus
  hosts: "repository"
  vars:
    file: docker-compose-nexus.yml
  environment:
    BACKEND_DOMAIN: nexus3
    INFRASTRUCTURE: "{{ infrastructure }}"
  roles:
  - { role: docker-proxy, tags: ["nexus3"] }
- hosts: "net"
  vars:
    service: nexus
    service_ip: "{{ hostvars['repository']['ansible_ssh_host'] }}"
  roles:
  - { role: oss-dns-record, tags: ["dns", "nexus3"] }

- name: registry.docker
  hosts: "repository"
  vars:
    file: docker-compose-registry.yml
  environment:
    BACKEND_DOMAIN: nexus3
    BASIC_AUTH_PASS: deployment
    BASIC_AUTH_USER: deployment
    INFRASTRUCTURE: "{{ infrastructure }}"
  roles:
  - { role: docker-proxy, tags: ["nexus3"] }
- hosts: "net"
  vars:
    service: registry.docker
    service_ip: "{{ hostvars['repository']['ansible_ssh_host'] }}"
  roles:
  - { role: oss-dns-record, tags: ["dns", "nexus3"] }

- name: docker-proxy
  hosts: "repository"
  vars:
    file: docker-compose.yml
  environment:
    INFRASTRUCTURE: "{{ infrastructure }}"
    SERVER_DOMAIN: "*"
  roles:
  - { role: docker-proxy, tags: ["nexus3"] }
#- hosts: "net"
#  vars:
#    service: docker-proxy
#    service_ip: "{{ hostvars['repository']['ansible_ssh_host'] }}"
#  roles:
#  - { role: oss-dns-record, tags: ["dns", "nexus3"] }

- name: mysql
  hosts: "repository"
  vars:
    git_repo: https://github.com/home1-oss/docker-mysql.git
    git_dest: /tmp/docker-mysql
    file: mysql-5.6/docker-compose.yml
    #pull: yes
  environment:
    INFRASTRUCTURE: "{{ infrastructure }}"
    MYSQL_ROOT_PASSWORD: root
    MYSQL_USER: user
    MYSQL_PASSWORD: user_pass
    DB_NAME: db
  roles:
  - { role: docker-compose, tags: ["mysql"] }
- hosts: "net"
  vars:
    service: mysql
    service_ip: "{{ hostvars['repository']['ansible_ssh_host'] }}"
  roles:
  - { role: oss-dns-record, tags: ["dns", "mysql"] }

- name: postgresql
  hosts: "repository"
  vars:
    git_repo: https://github.com/home1-oss/docker-postgresql.git
    git_dest: /tmp/docker-postgresql
    file: docker-compose.yml
    #pull: yes
  environment:
    INFRASTRUCTURE: "{{ infrastructure }}"
    POSTGRES_USER: user
    POSTGRES_PASSWORD: user_pass
    SONARQUBE_JDBC_USERNAME: sonar
    SONARQUBE_JDBC_PASSWORD: sonar
  roles:
  - { role: docker-compose, tags: ["postgresql"] }
- hosts: "net"
  vars:
    service: postgresql
    service_ip: "{{ hostvars['repository']['ansible_ssh_host'] }}"
  roles:
  - { role: oss-dns-record, tags: ["dns", "postgresql"] }

- name: cloudbus
  hosts: "repository"
  vars:
    git_repo: https://github.com/home1-oss/docker-cloudbus.git
    git_dest: /tmp/docker-cloudbus
    #file: rabbitmq-management/docker-compose.yml
    file: docker-compose.yml
    #pull: yes
  environment:
    INFRASTRUCTURE: "{{ infrastructure }}"
    SPRING_RABBITMQ_USERNAME: user
    SPRING_RABBITMQ_PASSWORD: user_pass
  roles:
  - { role: docker-compose, tags: ["cloudbus"] }
- hosts: "net"
  vars:
    service: cloudbus
    service_ip: "{{ hostvars['repository']['ansible_ssh_host'] }}"
  roles:
  - { role: oss-dns-record, tags: ["dns", "cloudbus"] }


- name: Docker config
  hosts: ["ci"]
  vars:
    docker_insecure_registries:
    - registry.docker.internal:80
    - mirror.docker.internal:80
    - gcr.io.internal:25004
    docker_registry_mirrors:
    - http://mirror.docker.internal:80
  roles:
    - { role: home1-oss.oss-docker-config, tags: ["docker-config"] }

- name: sonarqube
  hosts: "ci"
  vars:
    git_repo: https://github.com/home1-oss/docker-sonarqube.git
    git_dest: /tmp/docker-sonarqube
    file: docker-compose.yml
    #pull: yes
  environment:
    INFRASTRUCTURE: "{{ infrastructure }}"
    SONARQUBE_JDBC_URL: "jdbc:postgresql://postgresql.{{ INFRASTRUCTURE }}:5432/sonar"
    SONARQUBE_JDBC_USERNAME: sonar
    SONARQUBE_JDBC_PASSWORD: sonar
  roles:
  - { role: docker-compose, tags: ["sonarqube"] }
- hosts: "net"
  vars:
    service: sonarqube
    service_ip: "{{ hostvars['ci']['ansible_ssh_host'] }}"
  roles:
  - { role: oss-dns-record, tags: ["dns", "sonarqube"] }
- name: sonar
  hosts: "repository"
  vars:
    file: docker-compose-sonar.yml
  environment:
    BACKEND_DOMAIN: sonarqube
    BACKEND_PORT: 9000
    INFRASTRUCTURE: "{{ infrastructure }}"
    SERVER_DOMAIN: sonar
  roles:
  - { role: docker-proxy, tags: ["sonarqube"] }
- hosts: "net"
  vars:
    service: sonar
    service_ip: "{{ hostvars['repository']['ansible_ssh_host'] }}"
  roles:
  - { role: oss-dns-record, tags: ["dns", "sonarqube"] }

- name: gitlab
  hosts: "ci"
  vars:
    git_repo: https://github.com/home1-oss/docker-gitlab.git
    git_dest: /tmp/docker-gitlab
    file: gitlab/docker-compose.yml
    #pull: yes
  environment:
    CONFIGSERVER_WEBHOOK_ENDPOINT: http://configserver.internal:8888/monitor
    GITLAB_ROOT_PASSWORD: user_pass
    GITLAB_SHELL_SSH_PORT: 20022
    GIT_ADMIN_USERNAME: user
    GIT_DEPLOY_KEY: /app/gitlab/data/default_deploy_key.pub
    GIT_HTTP_PORT: 10080
    GIT_WORKSPACE: /app/gitlab/data/workspace
    INFRASTRUCTURE: "{{ infrastructure }}"
    SKIP_AUTO_REPO_INIT: false
  sudo: yes
  roles:
  - { role: docker-compose, tags: ["gitlab"] }
- hosts: "net"
  vars:
    service: gitlab
    service_ip: "{{ hostvars['ci']['ansible_ssh_host'] }}"
  roles:
  - { role: oss-dns-record, tags: ["dns", "gitlab"] }
- name: git
  hosts: "repository"
  vars:
    file: docker-compose-git.yml
  environment:
    BACKEND_DOMAIN: gitlab
    BACKEND_PORT: 10080
    INFRASTRUCTURE: "{{ infrastructure }}"
    SERVER_DOMAIN: git
  roles:
  - { role: docker-proxy, tags: ["gitlab"] }
- hosts: "net"
  vars:
    service: git
    service_ip: "{{ hostvars['repository']['ansible_ssh_host'] }}"
  roles:
  - { role: oss-dns-record, tags: ["dns", "gitlab"] }

- name: jenkins
  hosts: "ci"
  vars:
    git_repo: https://github.com/home1-oss/docker-jenkins.git
    git_dest: /tmp/docker-jenkins
    file: jenkins/docker-compose.yml
    #pull: yes
  environment:
    INFRASTRUCTURE: "{{ infrastructure }}"
  sudo: yes
  roles:
  - { role: docker-compose, tags: ["jenkins"] }
- hosts: "net"
  vars:
    service: jenkins
    service_ip: "{{ hostvars['ci']['ansible_ssh_host'] }}"
  roles:
  - { role: oss-dns-record, tags: ["dns", "jenkins"] }
