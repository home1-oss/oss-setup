# -*- mode: ruby -*-
# vi: set ft=ruby :

INIT_SH_PATH = File.join(File.dirname(__FILE__), "vagrant_assets/init.sh")
SYSCTL_CONF_PATH = File.join(File.dirname(__FILE__), "vagrant_assets/sysctl.conf")

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
#
Vagrant.configure(2) do |config|

  #config.ssh.forward_agent = true
  config.ssh.insert_key = false
  #config.ssh.password = 'vagrant'
  #config.ssh.username = 'root'

  config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'" # avoids 'stdin: is not a tty' error.
  config.ssh.private_key_path = ["#{ENV['HOME']}/.vagrant.d/insecure_private_key","#{ENV['HOME']}/.ssh/id_rsa"]

  config.vm.provision "shell", inline: <<-SCRIPT
    mkdir -p /root/.ssh
    curl https://raw.githubusercontent.com/mitchellh/vagrant/master/keys/vagrant.pub > /root/.ssh/authorized_keys
    printf "%s\n" "#{File.read("#{ENV['HOME']}/.ssh/id_rsa.pub")}" >> /root/.ssh/authorized_keys
    chmod 600 /root/.ssh/authorized_keys
    chown -R root:root /root/.ssh
  SCRIPT

  if File.exist?(SYSCTL_CONF_PATH)
    config.vm.provision :file, :source => "#{SYSCTL_CONF_PATH}", :destination => "/tmp/sysctl.conf"
    config.vm.provision :shell, :inline => "if [[ -f /tmp/sysctl.conf ]]; then mv /tmp/sysctl.conf /etc/sysctl.conf; sysctl -p; fi", :privileged => true
  end
  if File.exist?(INIT_SH_PATH)
    config.vm.provision :file, :source => "#{INIT_SH_PATH}", :destination => "/tmp/init.sh"
    config.vm.provision :shell, :inline => "/tmp/init.sh", :privileged => true
  end

  config.vm.define "rancherserver" do |rancherserver|
    rancherserver.vm.hostname = 'rancherserver'
    rancherserver.vm.box= "ubuntu/trusty64"
    rancherserver.vm.box_url = "ubuntu/trusty64"

    rancherserver.vm.network :private_network, ip: "172.22.101.100",
      nic_type: "82545EM"

    rancherserver.vm.provider :virtualbox do |v|
      v.customize ["modifyvm", :id, "--memory", 1024]
      v.customize ["modifyvm", :id, "--name", "rancherserver"]
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      v.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
    end
  end

  N = 2
  (1..N).each do |machine_id|
    config.vm.define "rancherhost#{machine_id}" do |machine|
      machine.vm.hostname = "rancherhost#{machine_id}"
      machine.vm.network "private_network", ip: "172.22.101.#{100+machine_id}",
        nic_type: "82545EM"

      if machine_id == 1
        machine.vm.box= "ubuntu/xenial64"
        machine.vm.box_url = "ubuntu/xenial64"
        #machine.vm.box= "ubuntu/trusty64"
        #machine.vm.box_url = "ubuntu/trusty64"
      end
      if machine_id == 2
        machine.vm.box= "centos/7"
        machine.vm.box_url = "centos/7"
        #machine.vm.box= "ubuntu/trusty64"
        #machine.vm.box_url = "ubuntu/trusty64"
      end
      if machine_id == 3
        machine.vm.box= "ubuntu/trusty64"
        machine.vm.box_url = "ubuntu/trusty64"
      end

      machine.vm.provider :virtualbox do |v|
        #v.customize ["modifyvm", :id, "--memory", 2560]
        v.customize ["modifyvm", :id, "--memory", 3840]
        v.customize ["modifyvm", :id, "--name", "rancherhost#{machine_id}"]
        v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
        v.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
      end

      # Only execute once the Ansible provisioner,
      # when all the machines are up and ready.
      #if machine_id == N
      #  machine.vm.provision :ansible do |ansible|
      #    # Disable default limit to connect to all the machines
      #    ansible.limit = "all"
      #    ansible.playbook = "playbook.yml"
      #  end
      #end
    end
  end

  #config.vm.define "rancherhost1" do |rancherhost1|
  #  rancherhost1.vm.hostname = 'rancherhost1'
  #  rancherhost1.vm.box= "ubuntu/trusty64"
  #  rancherhost1.vm.box_url = "ubuntu/trusty64"
  #
  #  rancherhost1.vm.network :private_network, ip: "172.22.101.3", nic_type: "82545EM"
  #
  #  rancherhost1.vm.provider :virtualbox do |v|
  #    v.customize ["modifyvm", :id, "--memory", 2048]
  #    v.customize ["modifyvm", :id, "--name", "rancherhost1"]
  #    v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
  #    v.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
  #  end
  #end
  #
  #config.vm.define "rancherhost2" do |rancherhost2|
  #  rancherhost2.vm.hostname = 'rancherhost2'
  #  rancherhost2.vm.box= "ubuntu/xenial64"
  #  rancherhost2.vm.box_url = "ubuntu/xenial64"
  #
  #  rancherhost2.vm.network :private_network, ip: "172.22.101.4", nic_type: "82545EM"
  #
  #  rancherhost2.vm.provider :virtualbox do |v|
  #    v.customize ["modifyvm", :id, "--memory", 2048]
  #    v.customize ["modifyvm", :id, "--name", "rancherhost2"]
  #    v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
  #    v.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
  #  end
  #end
  #
  #config.vm.define "rancherhost3" do |rancherhost3|
  #  rancherhost3.vm.hostname = 'rancherhost3'
  #  rancherhost3.vm.box= "centos/7"
  #  rancherhost3.vm.box_url = "centos/7"
  #
  #  rancherhost3.vm.network :private_network, ip: "172.22.101.5", nic_type: "82545EM"
  #
  #  rancherhost3.vm.provider :virtualbox do |v|
  #    v.customize ["modifyvm", :id, "--memory", 2048]
  #    v.customize ["modifyvm", :id, "--name", "rancherhost3"]
  #    v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
  #    v.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
  #  end
  #end

end
